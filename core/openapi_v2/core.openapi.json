{"swagger":"2.0","info":{"title":"OASIS DSS 2.0","description":"OASIS DSS 2.0","version":"0.1","contact":{"name":"OASIS DSS 2.0 Sample application support","url":"https:\/\/www.oasis-open.org\/committees\/tc_home.php?wg_abbrev=dss-x","email":"dss-x-comment@lists.oasis-open.org"},"license":{"name":"RF on Limited Terms","url":"https:\/\/www.oasis-open.org\/policies-guidelines\/ipr#RF-on-Limited-Mode"}},"host":"dev.trustable.eu:443","basePath":"\/dss\/v2.0\/test","schemes":["https"],"paths":{"\/sign":{"post":{"consumes":["application\/json"],"produces":["application\/json"],"parameters":[{"description":"Sign request object","in":"body","name":"body","required":true,"schema":{"$ref":"#\/definitions\/dss2-SignRequestType"}}],"responses":{"200":{"description":"Sign response object","schema":{"$ref":"#\/definitions\/dss2-SignResponseType"}},"default":{"description":"Sign response object","schema":{"$ref":"#\/definitions\/dss2-SignResponseType"}}}}},"\/verify":{"post":{"consumes":["application\/json"],"produces":["application\/json"],"parameters":[{"description":"Verification request object","in":"body","name":"body","required":true,"schema":{"$ref":"#\/definitions\/dss2-VerifyRequestType"}}],"responses":{"200":{"description":"Verification response object","schema":{"$ref":"#\/definitions\/dss2-VerifyResponseType"}},"default":{"description":"Verification response object","schema":{"$ref":"#\/definitions\/dss2-VerifyResponseType"}}}}}},"definitions":{"dss2-SignRequestType":{"type":"object","properties":{"profile":{"type":"array","items":{"type":"string"},"description":"This element indicates a set of DSS profiles. It is used by the client to select profiles the server supports."},"reqID":{"type":"string","description":"The RequestID element is used to correlate requests with responses. When present in a request, the server MUST return it in the response."},"inDocs":{"$ref":"#\/definitions\/dss2-InputDocumentsType"},"optInp":{"$ref":"#\/definitions\/dss2-OptionalInputsSignType","description":"It is intended to transport additional input elements of the signing request."}},"description":"The SignRequest component is sent by the client to request a signature or timestamp on some input documents."},"dss2-InputDocumentsType":{"type":"object","properties":{"doc":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"}},"transformed":{"type":"array","items":{"$ref":"#\/definitions\/dss2-TransformedDataType"}},"docHash":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentHashType"}}},"description":"This element is used to send input documents to a DSS server, whether for signing or verifying. An input document can be any piece of data that can be used as input to a signature or timestamp calculation. An input document can even be a signature or timestamp (for example, a pre-existing signature can be counter-signed or timestamped). An input document could also be a <ds:Manifest>, allowing the client to handle manifest creation while using the server to create the rest of the signature. Manifest validation is supported by an optional input \/ output."},"dss2-DocumentType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the input document a unique label within a particular request message. Through this identifier, an optional input can refer to a single input document. Using this identifier and the IDREF element it is possible to avoid redundant content."},"refURI":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s URI attribute when referring to this input document. The RefURI element SHOULD be specified. Not more than one RefURI element may be omitted in a single signing request."},"refType":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s Type attribute when referring to this input document."},"schemaRefs":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"},"description":"The identified schemas are to be used to process the ID attributes during parsing and for XPath evaluation. If anything else but Schema are referred to, the server MUST report an error. If a referred to Schema is not used by the XML document instance this MAY be ignored or reported to the client in the Fehler! Verweisquelle konnte nicht gefunden werden. subcomponent ResultMessage (for the definition of Schema subcomponent see the specification in section 3.1.30). The Document is assumed to be valid against the first Schema referred to by SchemaRefs. If a Schemas element is referred to first by SchemaRefs the document is assumed to be valid against the first Schema inside SchemaRefs. In both cases, the remaining schemas may occur in any order and are used either directly or indirectly by the first schema. If present, the server MUST use the schemas to identify the ID attributes and MAY also perform complete validation against the schemas."},"b64Data":{"$ref":"#\/definitions\/dsb-Base64DataType"}},"description":"The Document component contains input data for DSS processing."},"dsb-Base64DataType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the binary data a unique label within a particular message. Using this identifier and the IDREF element it is possible to avoid redundant content."},"value":{"type":"string","description":"This element holds an instance of generic content. This could be a document to be signed, a signature, a schema or other data."},"attRef":{"$ref":"#\/definitions\/dsb-AttachmentReferenceType","description":"This element allows to reference content that is transferred in a non-inlined way. These mechanisms may take advantage of optimizations (e.g. optimized transfer encodings). The content of MAY be integrity-protected by a message digest."},"mimeType":{"type":"string","description":"This element is denoting the type of the arbitrary data in the value element or the referenced attachment. "},"IDREF":{"type":"string","description":"This element identifies another binary data element within a particular message."}},"minProperties":0,"description":"The Base64Data component is a generic holder for arbitrary data. In addition to the data itself it also contains additional elements to qualify the MimeType of the data. It also offers an Id \/ Reference pair to implement a deduplication strategy, useful especially for bigger data blobs. The content is contained inside the mutually exclusive elements Value or AttRefURI.\nNon-normative comment:\nThere are different standards defined for handling and referencing an attachment. Maybe there will be more to come. Therefore the attachment reference mechanism is somehow generic here. Note: If MIME is used as encapsulation mechanism, the MIME content-type is available via a MIME header. However, the MIME headers may not be available to implementations and the SOAP 1.2 attachment feature is not restricted to MIME. Further the MIME header is not secured by the AttachmentReference's DigestInfo, which is calculated over the binary attachment data (not including the MIME headers)."},"dsb-AttachmentReferenceType":{"type":"object","properties":{"di":{"type":"array","items":{"$ref":"#\/definitions\/dsb-DigestInfoType"},"description":"An element of this type can be used to ensure the integrity of the attachment data. If these elements are supplied the server SHOULD compute a message digest using the algorithm given in DigestMethod over the binary data in the octet stream and compare it against the supplied DigestValue. If the comparison fails then a RequesterError qualified by a GeneralError and an appropriate message containing the AttRefURI is returned."},"attURI":{"type":"string","description":"SOAP 1.2 attachment feature [SOAPAtt] states that any secondary part (\"attachment\") can be referenced by a URI of any URI scheme. AttRefURI refers to such a secondary part (\"attachment\") and MUST resolve within the compound SOAP message. The default encapsulation mechanism is MIME as specified in the WS-I Attachments Profile [WS-I-Att] (cf. swaRef, http:\/\/www.ws-i.org\/Profiles\/AttachmentsProfile-1.0.html#Referencing_Attachments_from_the_SOAP_Envelope)."}},"required":["attURI"],"description":"Applications MAY support SOAP 1.2 attachment feature [SOAPAtt] or other attachment specifications (e.g. [SOAPMtom]) to transmit documents."},"dsb-DigestInfoType":{"type":"object","properties":{"alg":{"type":"string","description":"The string describes the digest algorithm in an appropriate way for the server side processing. Depending on the signature format this may be an OID (e.g. ‘2.16.840.1.101.3.4.2.1’), an URI (e.g. ‘http:\/\/www.w3.org\/2001\/04\/xmlenc#sha256’) or a descriptive string (‘SHA-256’)."},"value":{"type":"string"}},"required":["alg","value"],"description":"The DigestInfo component holds a digest value and an identification of the used digest algorithm. The DigestMethod isn’t strongly typed intentionally to support a broad variety of identifiers."},"dss2-TransformedDataType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the input document a unique label within a particular request message. Through this identifier, an optional input can refer to a single input document. Using this identifier and the IDREF element it is possible to avoid redundant content."},"refURI":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s URI attribute when referring to this input document. The RefURI element SHOULD be specified. Not more than one RefURI element may be omitted in a single signing request."},"refType":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s Type attribute when referring to this input document."},"schemaRefs":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"},"description":"The identified schemas are to be used to process the ID attributes during parsing and for XPath evaluation. If anything else but Schema are referred to, the server MUST report an error. If a referred to Schema is not used by the XML document instance this MAY be ignored or reported to the client in the Fehler! Verweisquelle konnte nicht gefunden werden. subcomponent ResultMessage (for the definition of Schema subcomponent see the specification in section 3.1.30). The Document is assumed to be valid against the first Schema referred to by SchemaRefs. If a Schemas element is referred to first by SchemaRefs the document is assumed to be valid against the first Schema inside SchemaRefs. In both cases, the remaining schemas may occur in any order and are used either directly or indirectly by the first schema. If present, the server MUST use the schemas to identify the ID attributes and MAY also perform complete validation against the schemas."},"transforms":{"$ref":"#\/definitions\/dsigrw-TransformsType","description":"This is the sequence of transforms applied by the client. It specifies the value for a <ds:Reference> element’s <ds:Transforms> child element. In other words, this specifies transforms that the client has already applied to the input document before the server will hash it. This component is required on a SignRequest, optional on a VerifyRequest."},"b64Data":{"$ref":"#\/definitions\/dsb-Base64DataType","description":"This element gives the binary output of a sequence of transforms to be hashed at the server side."},"whichRef":{"type":"integer","description":"As there may be multiple TransformedDataType \/ DocumentHashType components of the same document having the same URI [RFC 2396] and RefType on a SignRequest or VerifyRequest - their correspondance to an already existing <ds:Reference> however needs to be established on a VerifyRequest only. There is a need to disambiguate such cases. This element hence offers a way to clearly identify the <ds:Reference> when URI and RefType match multiple components. The corresponding <ds:Reference> is indicated by this zero-based WhichReference element (0 means the first <ds:Reference> in the signature, 1 means the second, and so on). This component is ignored on a SignRequest, optional on a VerifyRequest."}},"required":["b64Data"]},"dsigrw-TransformsType":{"type":"object","properties":{"transform":{"type":"array","items":{"$ref":"#\/definitions\/dsigrw-TransformType"}}},"required":["transform"],"description":"This component reflects the structure ‘Transforms’ defined in the XMLDSig specification [CLAUSE FOR LINK TO THE XMLDSig SPEC]. This section provides the definition required to support the DSS-X 2.0 multi-syntax approach."},"dsigrw-TransformType":{"type":"object","properties":{"value":{"type":"string","description":"This string holds the text content part of a ‘mixed’ XML element."},"b64Content":{"type":"string"},"xpath":{"type":"array","items":{"type":"string"}},"nsDecl":{"type":"array","items":{"$ref":"#\/definitions\/dsb-NsPrefixMappingType"},"description":"This list has no direct correspondence in the XMLDSig schema definition. It is used to represent the XML namespace prefix definitions in other syntaxes than XML.    "},"algo":{"type":"string"}},"required":["algo"],"description":"This component reflects the structure ‘Transforms’ defined in the XMLDSig specification [CLAUSE FOR LINK TO THE XMLDSig SPEC]. This section provides the definition required to support the DSS-X 2.0 multi-syntax approach. See section 2.6.4 for a detailed discussion of the applied changes."},"dsb-NsPrefixMappingType":{"type":"object","properties":{"uri":{"type":"string"},"pre":{"type":"string"}},"required":["uri","pre"],"description":"The NsPrefixMapping component allows the mapping of namespace URIs to namespace prefixes. This is required to evaluate XPath expression when using transport syntaxes that don’t support namespace. "},"dss2-DocumentHashType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the input document a unique label within a particular request message. Through this identifier, an optional input can refer to a single input document. Using this identifier and the IDREF element it is possible to avoid redundant content."},"refURI":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s URI attribute when referring to this input document. The RefURI element SHOULD be specified. Not more than one RefURI element may be omitted in a single signing request."},"refType":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s Type attribute when referring to this input document."},"schemaRefs":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"},"description":"The identified schemas are to be used to process the ID attributes during parsing and for XPath evaluation. If anything else but Schema are referred to, the server MUST report an error. If a referred to Schema is not used by the XML document instance this MAY be ignored or reported to the client in the Fehler! Verweisquelle konnte nicht gefunden werden. subcomponent ResultMessage (for the definition of Schema subcomponent see the specification in section 3.1.30). The Document is assumed to be valid against the first Schema referred to by SchemaRefs. If a Schemas element is referred to first by SchemaRefs the document is assumed to be valid against the first Schema inside SchemaRefs. In both cases, the remaining schemas may occur in any order and are used either directly or indirectly by the first schema. If present, the server MUST use the schemas to identify the ID attributes and MAY also perform complete validation against the schemas."},"transforms":{"$ref":"#\/definitions\/dsigrw-TransformsType","description":"It specifies the value for a <ds:Reference> element’s <ds:Transforms> child element when referring to this document hash. In other words, this specifies transforms that the client has already applied to the input document before hashing it. This component is required on a SignRequest, optional on a VerifyRequest. This component is required on a SignRequest, optional on a VerifyRequest."},"di":{"type":"array","items":{"$ref":"#\/definitions\/dsb-DigestInfoType"},"description":"This element MAY contain more than one DigestInfo sub-component to represent the digest values calculated with different digest algorithms. This may be useful when a requestor doesn’t know upfront which digest algorithms are supported \/ accepted by the server for signing. In the case of a verification request the client may not be able to parse the signature and instead calculate the digest for a comprehensive set of digest algorithms."},"whichRef":{"type":"integer","description":"As there may be multiple TransformedDataType \/ DocumentHashType components of the same document having the same URI [RFC 2396] and RefType on a SignRequest or VerifyRequest - their correspondence to an already existing <ds:Reference> however needs to be established on a VerifyRequest only. There is a need to disambiguate such cases. This element hence offers a way to clearly identify the <ds:Reference> when URI and RefType match multiple components. The corresponding <ds:Reference> is indicated by this zero-based WhichReference element (0 means the first <ds:Reference> in the signature, 1 means the second, and so on)."}},"required":["di"],"description":"The DocumentHash component represents a document that will not be transported to the server but just the calculated digest of it. This may be useful to limit the amount of data transferred or to ensure privacy of the document. "},"dss2-OptionalInputsSignType":{"type":"object","properties":{"policy":{"type":"array","items":{"type":"string"}},"lang":{"type":"string"},"other":{"type":"array","items":{"$ref":"#\/definitions\/dsb-AnyType"}},"claimedIdentity":{"$ref":"#\/definitions\/dss2-ClaimedIdentityType","description":"This element indicates the identity of the client who is making a request. The server may use this to parameterize any aspect of its processing. Profiles that make use of this element MUST define its semantics."},"schemas":{"$ref":"#\/definitions\/dss2-SchemasType","description":"The Schemas element provides a mechanism for transporting XML schemas required for validating an XML document along with the request message."},"addTimestamp":{"$ref":"#\/definitions\/dss2-UpdateSignatureInstructionType","description":"The AddTimestamp element indicates that the client wishes the server to embed a timestamp token as a property or attribute of the resultant or the supplied signature. The timestamp token will be applied to the signature value in the case of CMS\/PKCS7 signatures or the <ds:SignatureValue> element in the case of XML signatures. Note: Procedures for handling other forms of timestamp may be defined in profiles of the Core.  In particular, the DSS AdES profile [DSS-AdES-P] defines procedures for generating timestamps over the content which is about to be signed (sometimes called content timestamps), and the DSS Timestamp profile [DSS-TS-P] defines procedures for handling standalone timestamps."},"sigType":{"type":"string","description":"The SignatureType element indicates the type of signature or timestamp to produce (such as a XML signature, a XML timestamp, a RFC 3161 timestamp, a CMS signature, etc.). See section 7.1 for some URI references that MAY be used as the value of this element."},"aud":{"$ref":"#\/definitions\/dss2-IntendedAudienceType","description":"This element gives a hint regarding the target audience of the requested signature."},"keySel":{"type":"array","items":{"$ref":"#\/definitions\/dss2-KeySelectorType"},"description":"The KeySelector provides details which key or sets of keys the client is expecting to be used. "},"props":{"$ref":"#\/definitions\/dss2-PropertiesHolderType","description":"The Properties element is used to instruct the server to add certain signed or unsigned properties (aka “signature attributes”) into the signature. The client MAY send the server a particular value to use for each property, or leave the value up to the server to determine. The server MAY add additional properties, even if these aren’t requested by the client."},"incObj":{"type":"array","items":{"$ref":"#\/definitions\/dss2-IncludeObjectType"},"description":"The IncludeObject element is used to request the creation of an XMLSig enveloping signature."},"incContent":{"type":"boolean","default":"false","description":" If the value of the IncludeEContent is ‘true’ a CMS signature includes enveloped (or ‘encapsulated’) content."},"sigPlacement":{"$ref":"#\/definitions\/dss2-SignaturePlacementType","description":"The SignaturePlacement element is used to request the creation of an XMLSig enveloped signature placed within a document. The resulting document with the enveloped signature is placed in the optional output DocumentWithSignature."},"sigRefs":{"$ref":"#\/definitions\/dss2-SignedReferencesType","description":"The SignedReferences element gives the client greater control over how the <ds:Reference> elements of a XMLSig signature are formed."},"nonce":{"type":"integer","description":"The Nonce element MAY be used to provide a large random number to enable the client correlate a timestamp request with the response."},"sigAlgo":{"type":"string","description":"The SignatureAlgorithm element MAY be used to request a specific signing algorithm. "},"sad":{"type":"string","description":"The SignatureActivationData element is used by the client to supply activation data."}},"description":"The OptionalInputsSign component defines a set of additional inputs associated with the processing of a signing request.The OptionalInputsSign component contains additional inputs associated with the processing of a signing request. Profiles MAY specify the allowed optional inputs and their default values. The definition of an optional input MAY include a default value, so that a client may omit the OptionalInputsSign yet still get service from any profile-compliant DSS server. If a server doesn’t recognize or can’t handle any optional input, it MUST reject the request with a ResultMajor code of RequesterError and a ResultMinor code of NotSupported."},"dsb-AnyType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the binary data a unique label within a particular message. Using this identifier and the IDREF element it is possible to avoid redundant content."},"value":{"type":"string","description":"This element holds an instance of generic content. This could be a document to be signed, a signature, a schema or other data."},"attRef":{"$ref":"#\/definitions\/dsb-AttachmentReferenceType","description":"This element allows to reference content that is transferred in a non-inlined way. These mechanisms may take advantage of optimizations (e.g. optimized transfer encodings). The content of MAY be integrity-protected by a message digest."},"mimeType":{"type":"string","description":"This element is denoting the type of the arbitrary data in the value element or the referenced attachment. "},"IDREF":{"type":"string","description":"This element identifies another binary data element within a particular message."}},"description":"This element MAY hold a set of base64 encoded arbitrary data. To help the processing of the data it may be qualified by the mime type element.\nNon-normative comment:\nThis component was introduced in DSS core version 1.0 and is used as a container for arbitrary data. In version 1.0 there were different ways defined to represent the data, e.g. as inline XML, encapsulated XML or base64 encoded. The expansion of the scope to different syntaxes limits the options to base64 encoded data or attachments as represented in Base64Data. Although the component Any does not additional subcomponents in this version it is used to represent the ‘container’ nature. "},"dss2-ClaimedIdentityType":{"type":"object","properties":{"name":{"$ref":"#\/definitions\/saml2rw-NameIDType","description":"The claimed identity may be authenticated using the security binding, according to section 6, or using authentication data provided in the SupportingInfo element. The server MUST check that the asserted Name is authenticated before relying upon the Name."},"suppInfo":{"$ref":"#\/definitions\/dsb-AnyType","description":"The SupportingInfo element can be used by profiles to carry information related to the claimed identity. One possible use of SupportingInfo is to carry authentication data that authenticates the request as originating from the claimed identity (examples of authentication data include a password or SAML Assertion, a signature or MAC calculated over the request using a client key). "}},"required":["name"],"description":"This element indicates the identity of the client who is making a request. The server may use this to parameterize any aspect of its processing. Profiles that make use of this element MUST define its semantics."},"saml2rw-NameIDType":{"type":"object","properties":{"value":{"type":"string"},"format":{"type":"string","description":"The Format element represents the classification of string-based identifier information."},"provId":{"type":"string","description":"The SPProvidedID element defines the alternative identifier of the principal most recently set by the service provider or affiliation, if any"},"nameQual":{"type":"string","description":"The NameQualifier element contains the security or administrative domain that qualifies the name. This attribute provides a means to federate names from disparate user stores without collision."},"spNameQual":{"type":"string","description":"The SPNameQualifier element further qualifies a name with the name of a service provider or affiliation of providers. This attribute provides an additional means to federate names on the basis of the relying party or parties."}},"description":"The NameID component is used when an element serves to represent an entity by a string-valued name. This component reflects the structure ‘NameID’ defined in the SAML2 specification [CLAUSE FOR LINK TO THE SAML2 SPEC]. This section provides the definition required to support the DSS-X 2.0 multi-syntax approach."},"dss2-SchemasType":{"type":"object","properties":{"schema":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"}}},"required":["schema"],"description":"The Schemas component provides an in band mechanism for communicating XML schemas required for validating an XML document.\nNon-normative comment:\nNote: It is recommended to use xml:id as defined in [xml:id] as id in the payload being referenced by a <ds:Reference>, because the schema then does not have to be supplied for identifying the ID attributes."},"dss2-UpdateSignatureInstructionType":{"type":"object","properties":{"type":{"type":"string","format":"uri","description":"The Type element defines what it means to “update” a signature. For example, the updated signature may be the original signature with some additional unsigned signature properties added to it (such as timestamps, counter-signatures, or additional information for use in verification), or the updated signature could be an entirely new signature calculated on the same input documents as the input signature. Profiles that use this optional input MUST define the allowed values, and the default value, for the Type element (unless only a single type of update is supported, in which case the Type attribute can be omitted)."}},"description":"The UpdateSignatureInstruction component can be used as an optional input for both signing and verification requests and defines the type of updating that should to be applied. The updated signature will be returned in an UpdatedSignature (see section 3.1.52) or a DocumentWithSignature (see section 3.1.40) component."},"dss2-IntendedAudienceType":{"type":"object","properties":{"recipient":{"type":"array","items":{"$ref":"#\/definitions\/saml2rw-NameIDType"}}},"required":["recipient"],"description":"The IntendedAudience element tells the server who the target audience of this signature is. The server MAY use this to parameterize any aspect of its processing (for example, the server MAY choose to sign with a key that it knows a particular recipient trusts)."},"dss2-KeySelectorType":{"type":"object","properties":{"x509Digest":{"$ref":"#\/definitions\/dss2-X509DigestType"},"subject":{"type":"string","description":"The X509SubjectName element contains an X.509 subject distinguished name that SHOULD be represented as a string that complies with section 3 of RFC4514 [LDAP-DN]."},"ski":{"type":"string","description":"The X509SKI element contains the base64 encoded plain (i.e. non-DER-encoded) value of a X509 V.3 SubjectKeyIdentifier extension."},"cert":{"type":"string","description":"The X509Certificate element contains a base64-encoded [X509V3] certificate."},"name":{"type":"string","description":"It selects a key to be used for signing in a generic way. Usually the client knows about the valid values for KeyName."}},"minProperties":1,"maxProperties":1,"description":"The KeySelector component holds data that selects a specific key or certificate or group of certificates. Only one of its sub-components MUST be present. But a KeySelector component can occur multiple times as a sub-component in the OptionalInputsSign component"},"dss2-X509DigestType":{"type":"object","properties":{"value":{"type":"string"},"algo":{"type":"string","description":"The string describes the digest algorithm in an appropriate way for the server side processing. Depending on the signature format this may be an OID (e.g. ‘2.16.840.1.101.3.4.2.1’), an URI (e.g. ‘http:\/\/www.w3.org\/2001\/04\/xmlenc#sha256’) or a descriptive string (‘SHA-256’)."}},"required":["algo"],"description":"The X509Digest component contains a base64-encoded digest of a certificate. The digest algorithm URI is identified with a required Algorithm element. The input to the digest MUST be the raw octets that would be base64-encoded of a X509Certificate."},"dss2-PropertiesHolderType":{"type":"object","properties":{"signedProps":{"$ref":"#\/definitions\/dss2-PropertiesType","description":"These properties will be covered by the signature."},"unsignedProps":{"$ref":"#\/definitions\/dss2-PropertiesType","description":"These properties will not be covered by the signature."}},"description":"The PropertiesHolder component is used to request that the server add certain signed or unsigned properties (aka “signature attributes”) into the signature. The client can send the server a particular value to use for each property, or leave the value up to the server to determine. The server can add additional properties, even if these aren’t requested by the client."},"dss2-PropertiesType":{"type":"object","properties":{"prop":{"type":"array","items":{"$ref":"#\/definitions\/dss2-PropertyType"}}},"required":["prop"]},"dss2-PropertyType":{"type":"object","properties":{"id":{"type":"string"},"value":{"$ref":"#\/definitions\/dsb-AnyType","description":"The Value element contains arbitrary content wrapped in an Fehler! Verweisquelle konnte nicht gefunden werden.."}},"required":["id"]},"dss2-IncludeObjectType":{"type":"object","properties":{"whichDoc":{"$ref":"#\/definitions\/dss2-DocumentBaseType","description":"This element identifies the input document which will be inserted into the returned signature."},"hasObjectTagsAndAttributesSet":{"type":"boolean","default":"false","description":"If ‘true’ this element indicates that the Document contains a <ds:Object> element which has been prepared ready for direct inclusion in the <ds:Signature>."},"objId":{"type":"string","description":"It sets the Id attribute on the returned <ds:Object>."},"createRef":{"type":"boolean","default":"true","description":"If the createReference element is set to false inhibits the creation of the <ds:Reference> associated to the RefURI element of the input document referred by the WhichDocument element, effectively allowing clients to include <ds:Object> elements not covered\/protected by the signature being created."}},"description":"The IncludeObject component is used to request the creation of an XMLSig enveloping signature. Multiple occurrences of this optional input can be present in a single SignRequest message. Each occurrence will cause the inclusion of an object inside the signature being created."},"dss2-DocumentBaseType":{"type":"object","properties":{"ID":{"type":"string","description":"This identifier gives the input document a unique label within a particular request message. Through this identifier, an optional input can refer to a single input document. Using this identifier and the IDREF element it is possible to avoid redundant content."},"refURI":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s URI attribute when referring to this input document. The RefURI element SHOULD be specified. Not more than one RefURI element may be omitted in a single signing request."},"refType":{"type":"string","description":"This specifies the value for a <ds:Reference> element’s Type attribute when referring to this input document."},"schemaRefs":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentType"},"description":"The identified schemas are to be used to process the ID attributes during parsing and for XPath evaluation. If anything else but Schema are referred to, the server MUST report an error. If a referred to Schema is not used by the XML document instance this MAY be ignored or reported to the client in the Fehler! Verweisquelle konnte nicht gefunden werden. subcomponent ResultMessage (for the definition of Schema subcomponent see the specification in section 3.1.30). The Document is assumed to be valid against the first Schema referred to by SchemaRefs. If a Schemas element is referred to first by SchemaRefs the document is assumed to be valid against the first Schema inside SchemaRefs. In both cases, the remaining schemas may occur in any order and are used either directly or indirectly by the first schema. If present, the server MUST use the schemas to identify the ID attributes and MAY also perform complete validation against the schemas."}},"description":"The DocumentBaseType inherits its elements to the components DocumentType, TransformedDataType and DocumentHashType. The DocumentBaseType contains the basic information shared by the inheriting components and remaining persistent during the process from input document retrieval until digest calculation for the relevant document.\nNon-normative comment:\nIt is recommended to use xml:id as defined in [xml:id] as id in the payload being referenced by a <ds:Reference>, because the schema then does not have to be supplied for identifying the ID attributes."},"dss2-SignaturePlacementType":{"type":"object","properties":{"xPathAfter":{"type":"string","description":"This elements holds an XPath expression which identifies an element, inside the XML input document, after which the signature will be inserted."},"xPathFirstChildOf":{"type":"string","description":"This elements holds an XPath expression which identifies an element, in the XML input document, which the signature will be inserted as the first child of."},"nsDecl":{"type":"array","items":{"$ref":"#\/definitions\/dsb-NsPrefixMappingType"}},"whichDoc":{"$ref":"#\/definitions\/dss2-DocumentBaseType","description":"The WhichDocument element identifies the input document which the signature will be inserted into."},"createEnvelopedSignature":{"type":"boolean","default":"true","description":"If the CreateEnvelopedSignature element is set to true a reference having an enveloped signature transform is created."}},"description":"The SignaturePlacement component is used to request the creation of an XMLSig enveloped signature placed within an input document. The resulting document with the enveloped signature is placed in the optional output DocumentWithSignature element. The server places the signature in the document identified using the WhichDocument attribute. In the case of a non-XML input document then the server will return an error unless alternative procedures are defined by a profile or in the server policy for handling such a situation."},"dss2-SignedReferencesType":{"type":"object","properties":{"signedRef":{"type":"array","items":{"$ref":"#\/definitions\/dss2-SignedReferenceType"}}},"required":["signedRef"],"description":"The SignedReferences component gives the client greater control over how the <ds:Reference> elements are formed."},"dss2-SignedReferenceType":{"type":"object","properties":{"transforms":{"$ref":"#\/definitions\/dsigrw-TransformsType","description":"The Transforms element requests the server to perform additional transforms on this reference."},"whichDoc":{"$ref":"#\/definitions\/dss2-DocumentBaseType","description":"This defines which input document this reference refers to."},"refURI":{"type":"string","description":"If this element is present, the corresponding <ds:Reference> element’s URI attribute is set to its value. If it is not present, the URI attribute is omitted in the corresponding <ds:Reference>."},"refId":{"type":"string","description":"This element sets the Id attribute of the corresponding <ds:Reference>."}},"required":["whichDoc"],"description":"Each SignedReference component refers to an input document and allows multiple <ds:Reference> elements to be based on a single input document. Furthermore, the client can request additional transforms to be applied to each <ds:Reference>, and can set each <ds:Reference> element’s Id or URI attribute. These aspects of the <ds:Reference> can only be set through the SignedReference component; they cannot be set through the input documents, since they are aspects of the reference to the input document, not the input document itself."},"dss2-SignResponseType":{"type":"object","properties":{"result":{"$ref":"#\/definitions\/dsb-ResultType","description":"The Fehler! Verweisquelle konnte nicht gefunden werden. element represents the status of the request.."},"profile":{"type":"array","items":{"type":"string"},"description":"This element lists the set of DSS profile applied by the server. This set MAY include the set of profiles requested by the client. But the server MAY use more comprehensive set of profiles and add additional profiles not requested by the client."},"reqID":{"type":"string","description":"The RequestID element is used to correlate this response with its request."},"optOutp":{"$ref":"#\/definitions\/dss2-OptionalOutputsSignType","description":"The OptionalOutputs element contains additional signing related outputs returned by the server."},"sigObj":{"$ref":"#\/definitions\/dss2-SignatureObjectType"}},"description":"The SignResponse component returns the requested signature or timestamp to the requestor."},"dsb-ResultType":{"type":"object","properties":{"maj":{"type":"string","enum":["urn:oasis:names:tc:dss:1.0:resultmajor:Success","urn:oasis:names:tc:dss:1.0:resultmajor:RequesterError","urn:oasis:names:tc:dss:1.0:resultmajor:ResponderError","urn:oasis:names:tc:dss:1.0:resultmajor:InsufficientInformation"],"description":"The ResultMajor element describes the most significant component of the result code."},"min":{"type":"string"},"msg":{"$ref":"#\/definitions\/dsb-InternationalStringType","description":"It represents a message which MAY be returned to an operator, logged by the client, used for debugging, etc."},"pRef":{"type":"string","description":"In the case of processing problem the server may want to give a reference to processing details (e.g. for debugging purposes) but doesn’t want to disclose sensitive information this element can be used. It may contain a random string that links the current request to internal logs, processing protocols or crash dumps. "}},"required":["maj"],"description":"The Result element is returned with every response message."},"dsb-InternationalStringType":{"type":"object","properties":{"value":{"type":"string"},"lang":{"type":"string","description":"This element identifies the language of the value element."}},"required":["lang"],"description":"This element attaches an element to a human-readable string to specify the string’s language."},"dss2-OptionalOutputsSignType":{"type":"object","properties":{"policy":{"type":"array","items":{"type":"string"}},"other":{"type":"array","items":{"$ref":"#\/definitions\/dsb-AnyType"}},"transformed":{"$ref":"#\/definitions\/dss2-TransformedDocumentType","description":"The TransformedDocument element contains a document corresponding to the specified <ds:Reference>, after all the transforms in the reference have been applied. In other words, the hash value of the returned document should equal the <ds:Reference> element’s <ds:DigestValue>."},"schemas":{"$ref":"#\/definitions\/dss2-SchemasType","description":"The Schemas element is typically used as an optional input in a VerifyRequest. However, there are situations where it may be used as an optional output. For example, a service that makes use of the ReturnUpdatedSignature mechanism may, after verifying a signature over an input document, generate a signature over a document of a different schema than the input document. In this case the Schemas element MAY be used to communicate the XML schemas required for validating a returned XML document."},"docWithSignature":{"$ref":"#\/definitions\/dss2-DocumentWithSignatureType","description":"DocumentWithSignature element contains the input document with the signature inserted."}},"description":"The OptionalOutputsSignType component defines a set of additional outputs associated with the processing of a signing request. This document does not define any additional outputs but profiles may extend the set of additional outputs."},"dss2-TransformedDocumentType":{"type":"object","properties":{"doc":{"$ref":"#\/definitions\/dss2-DocumentType","description":"This element contains the transformed document."},"whichRef":{"type":"integer","description":"To match outputs to inputs, each TransformedDocument will contain a WhichReference element which matches the corresponding optional input."}},"required":["doc","whichRef"],"description":"The TransformedDocument component contains a document corresponding to the specified <ds:Reference>, after all the transforms in the reference have been applied."},"dss2-DocumentWithSignatureType":{"type":"object","properties":{"doc":{"$ref":"#\/definitions\/dss2-DocumentType","description":"This contains the input document with a signature inserted in some fashion."}},"required":["doc"],"description":"The DocumentWithSignature component contains a 3.1.14 with the signature inserted as requested with the SignaturePlacement component."},"dss2-SignatureObjectType":{"type":"object","properties":{"b64Sig":{"$ref":"#\/definitions\/dsb-Base64DataType","description":"A base64 encoding of some arbitrary signature, such as a XML signature [XMLDSIG], PGP [RFC 2440] or CMS [RFC 3852] signature. The type of signature is specified by the MimeType element of the Base64DataType component."},"sigPtr":{"$ref":"#\/definitions\/dss2-SignaturePtrType","description":"This element is used to point to an XML signature in an input (for a verify request) or output (for a sign response) document in which a signature is enveloped."},"schemaRefs":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DocumentBaseType"},"description":"The identified schemas are to be used to process the ID attributes during parsing and for XPath evaluation. If anything else but <Schema> are referred to, the server MUST report an error. If a referred to <Schema> is not used by the XML document instance this MAY be ignored or reported to the client in the Fehler! Verweisquelle konnte nicht gefunden werden. subcomponent ResultMessage (for the definition of Schema subcomponent see the specification of 3.1.30)"}},"description":"The SignatureObject component contains a signature or timestamp of some sort. This element is returned in a sign response message, and sent in a verify request message."},"dss2-SignaturePtrType":{"type":"object","properties":{"nsDecl":{"type":"array","items":{"$ref":"#\/definitions\/dsb-NsPrefixMappingType"}},"whichDoc":{"$ref":"#\/definitions\/dss2-DocumentBaseType","description":"This element identifies the input document being pointed at."},"xPath":{"type":"string","description":"This element identifies the signature element being pointed at within the selected document. The XPath expression is evaluated from the root node (see section 5.1 of [XPATH]) of the document identified by WhichDocument. The context node for the XPath evaluation is the document’s DocumentElement (see section 2.1 Well-Formed XML Documents [XML]). Regarding namespace declarations for the expression necessary for evaluation see section 1 of [XPATH]."}},"required":["whichDoc"],"description":"The SignaturePtr component is used to point to an XML signature in an input (for a verify request) or output (for a sign response) document in which a signature is enveloped."},"dss2-VerifyRequestType":{"type":"object","properties":{"profile":{"type":"array","items":{"type":"string"},"description":"This element indicates a set of DSS profiles. It is used by the client to select profiles the server supports."},"reqID":{"type":"string","description":"The RequestID element is used to correlate requests with responses. When present in a request, the server MUST return it in the response."},"inDocs":{"$ref":"#\/definitions\/dss2-InputDocumentsType"},"optInp":{"$ref":"#\/definitions\/dss2-OptionalInputsVerifyType"},"sigObj":{"$ref":"#\/definitions\/dss2-SignatureObjectType","description":"The SignatureObject element contains a signature or timestamp, or else contains a <SignaturePtr> that points to an XML signature in one of the input documents."}},"description":"The VerifyRequest component is sent by the client to verify a signature or timestamp on some input documents."},"dss2-OptionalInputsVerifyType":{"type":"object","properties":{"policy":{"type":"array","items":{"type":"string"}},"lang":{"type":"string"},"other":{"type":"array","items":{"$ref":"#\/definitions\/dsb-AnyType"}},"claimedIdentity":{"$ref":"#\/definitions\/dss2-ClaimedIdentityType","description":"This element indicates the identity of the client who is making a request. The server may use this to parameterize any aspect of its processing. Profiles that make use of this element MUST define its semantics."},"schemas":{"$ref":"#\/definitions\/dss2-SchemasType","description":"The Schemas element provides a mechanism for transporting XML schemas required for validating an XML document along with the request message."},"addTimestamp":{"$ref":"#\/definitions\/dss2-UpdateSignatureInstructionType","description":"The AddTimestamp element indicates that the client wishes the server to embed a timestamp token as a property or attribute of the resultant or the supplied signature. The timestamp token will be applied to the signature value in the case of CMS\/PKCS7 signatures or the <ds:SignatureValue> element in the case of XML signatures. Note: Procedures for handling other forms of timestamp may be defined in profiles of the Core.  In particular, the DSS AdES profile [DSS-AdES-P] defines procedures for generating timestamps over the content which is about to be signed (sometimes called content timestamps), and the DSS Timestamp profile [DSS-TS-P] defines procedures for handling standalone timestamps."},"useVerificationTime":{"$ref":"#\/definitions\/dss2-UseVerificationTimeType","description":"The UseVerificationTime element instructs the server to attempt to determine the signature’s validity at the specified time, instead of a time determined by the server policy."},"returnVerificationTime":{"type":"boolean","default":"false","description":"This element cam be used by the client to obtain the time instant used by the server to validate the signature."},"addKeyInfo":{"type":"array","items":{"$ref":"#\/definitions\/dss2-AdditionalKeyInfoType"},"description":"This element provides the server with additional data (such as certificates and CRLs) which it can use to validate the signature. These options are not allowed in multi-signature verification."},"returnProcDetails":{"type":"boolean","default":"false","description":"This element instructs the server to return a ProcessingDetails element. It is not allowed in multi-signature verification."},"returnSigningTime":{"type":"boolean","default":"false","description":"This element allows the client to instruct the server to return the time instant associated to the signature creation as a SigningTimeInfo element."},"returnSigner":{"type":"boolean","default":"false"},"returnUpdated":{"type":"array","items":{"$ref":"#\/definitions\/dss2-UpdateSignatureInstructionType"},"description":"This element allows the client to instruct the server to return an UpdatedSignature output, containing a new or updated signature. This document does not define values for this element, but profiles may provide a set of URIs."},"returnTransformed":{"type":"array","items":{"$ref":"#\/definitions\/dss2-ReturnTransformedDocumentType"},"description":"The ReturnTransformedDocument element instructs the server to return an input document to which the XML signature transforms specified by a particular <ds:Reference> have been applied. The result of the transformations will be returned as a TransformedDocument element."},"returnTimestamped":{"$ref":"#\/definitions\/dss2-UpdateSignatureInstructionType","description":"It indicates that the client wishes the server to update the signature after its verification by embedding a signature timestamp token as an unauthenticated attribute (see \"unauthAttrs\" in section 9.1 [RFC 3852]) or *unsigned* property (see section 6.2.5 \"The UnsignedSignatureProperties element\" and section 7.3 \"The SignatureTimeStamp element\" [XAdES]) of the supplied signature. The timestamp token will be on the signature value in the case of CMS\/PKCS7signatures or the <ds:SignatureValue> element in the case of XML signatures."},"verifyManifests":{"type":"boolean","default":"false","description":"This element is allowed in multi-signature verification requests."}},"description":"The OptionalInputsVerify component defines a set of additional inputs associated with the processing of a verification request. Profiles MAY specify the allowed optional inputs and their default values. The definition of an optional input MAY include a default value, so that a client may omit the OptionalInputsVerify yet still get service from any profile-compliant DSS server.If a server doesn’t recognize or can’t handle any optional input, it MUST reject the request with a ResultMajor code of RequesterError and a ResultMinor code of NotSupported."},"dss2-UseVerificationTimeType":{"type":"object","properties":{"currTime":{"type":"boolean","default":"false","description":"This element instructs the server to use its current time (normally the time associated with the server-side request processing)."},"specTime":{"type":"integer","format":"utc-millisec","description":"The SpecificTime element allows the client to manage manually the time instant used in the verification process. It SHOULD be expressed as UTC time (Coordinated Universal Time) to reduce confusion with the local time zone use."},"b64Content":{"type":"string","description":"The Base64Content element allows the provision of additional date\/time data."}},"minProperties":1,"maxProperties":1,"description":"This UseVerificationTime component instructs the server to attempt to determine the signature’s validity at the specified time, instead of a time determined by the server policy."},"dss2-AdditionalKeyInfoType":{"type":"object","properties":{"x509Digest":{"$ref":"#\/definitions\/dss2-X509DigestType"},"subject":{"type":"string"},"ski":{"type":"string"},"cert":{"type":"string"},"name":{"type":"string"},"X509CRL":{"type":"string","description":"In addition to the elements included in component 3.1.33 the X509CRL element holds a CRL."}},"minProperties":1,"maxProperties":1,"description":"The AdditionalKeyInfo component provides the server with additional data (such as certificates and CRLs) which it can use to validate the signature."},"dss2-ReturnTransformedDocumentType":{"type":"object","properties":{"whichRef":{"type":"integer","description":"To match outputs to inputs, each TransformedDocument will contain a WhichReference attribute which matches the corresponding optional input."}},"required":["whichRef"],"description":"The ReturnTransformedDocument component instructs the server to return an input document to which the XML signature transforms specified by a particular <ds:Reference> have been applied. The <ds:Reference> is indicated by the zero-based WhichReference attribute (0 means the first <ds:Reference> in the signature, 1 means the second, and so on). Multiple occurrences of this optional input can be present in a single verify request message. Each occurrence will generate a corresponding optional output."},"dss2-VerifyResponseType":{"type":"object","properties":{"result":{"$ref":"#\/definitions\/dsb-ResultType","description":"The Fehler! Verweisquelle konnte nicht gefunden werden. element represents the status of the request.."},"profile":{"type":"array","items":{"type":"string"},"description":"This element lists the set of DSS profile applied by the server. This set MAY include the set of profiles requested by the client. But the server MAY use more comprehensive set of profiles and add additional profiles not requested by the client."},"reqID":{"type":"string","description":"The RequestID element is used to correlate this response with its request."},"optOutp":{"$ref":"#\/definitions\/dss2-OptionalOutputsVerifyType"}},"description":"The VerifyResponse component is returned by the server to provide the results of verification."},"dss2-OptionalOutputsVerifyType":{"type":"object","properties":{"policy":{"type":"array","items":{"type":"string"}},"other":{"type":"array","items":{"$ref":"#\/definitions\/dsb-AnyType"}},"transformed":{"$ref":"#\/definitions\/dss2-TransformedDocumentType","description":"The TransformedDocument element contains a document corresponding to the specified <ds:Reference>, after all the transforms in the reference have been applied. In other words, the hash value of the returned document should equal the <ds:Reference> element’s <ds:DigestValue>."},"schemas":{"$ref":"#\/definitions\/dss2-SchemasType","description":"The Schemas element is typically used as an optional input in a VerifyRequest. However, there are situations where it may be used as an optional output. For example, a service that makes use of the ReturnUpdatedSignature mechanism may, after verifying a signature over an input document, generate a signature over a document of a different schema than the input document. In this case the Schemas element MAY be used to communicate the XML schemas required for validating a returned XML document."},"docWithSignature":{"$ref":"#\/definitions\/dss2-DocumentWithSignatureType","description":"DocumentWithSignature element contains the input document with the signature inserted."},"result":{"$ref":"#\/definitions\/dss2-VerifyManifestResultsType"},"signingTimeInfo":{"$ref":"#\/definitions\/dss2-SigningTimeInfoType","description":"The SigningTimeInfo element returns the signature’s creation date and time. When there's no way for the server to determine the signing time, the server MUST omit this element."},"verificationTimeInfo":{"$ref":"#\/definitions\/dss2-VerificationTimeInfoType","description":"In addition to the verification time, the server MAY include in the VerificationTimeInfo element any other relevant time instants that may have been used when determining the verification time or that may be useful for its qualification."},"procDetails":{"$ref":"#\/definitions\/dss2-ProcessingDetailsType","description":"The ProcessingDetails element elaborates on what signature verification steps succeeded or failed."},"signerIdentity":{"$ref":"#\/definitions\/saml2rw-NameIDType","description":"The SignerIdentity element contains an indication of who performed the signature."},"updSignature":{"$ref":"#\/definitions\/dss2-UpdatedSignatureType","description":"The UpdatedSignature element contains the returned signature."},"timestampedSignature":{"$ref":"#\/definitions\/dss2-UpdatedSignatureType","description":"The TimestampedSignature element contains the returned timestamped signature."}},"description":"The OptionalOutputsVerify component defines a set of additional outputs associated with the processing of a verification request."},"dss2-VerifyManifestResultsType":{"type":"object","properties":{"signedRef":{"type":"array","items":{"$ref":"#\/definitions\/dss2-ManifestResultType"}}},"required":["signedRef"],"description":"The results of verifying individual <ds:Reference>'s within a <ds:Manifest> are returned in the VerifyManifestResults component."},"dss2-ManifestResultType":{"type":"object","properties":{"xPath":{"type":"string","description":"This element identifies the manifest reference, in the XML signature, to which this result pertains."},"status":{"type":"string","enum":["urn:oasis:names:tc:dss:1.0:manifeststatus:Valid","urn:oasis:names:tc:dss:1.0:manifeststatus:Invalid"],"description":"This element indicates the manifest validation outcome. "},"nsDecl":{"type":"array","items":{"$ref":"#\/definitions\/dsb-NsPrefixMappingType"}}},"required":["xPath","status"],"description":"The VerifyManifestResults component is comprised of one or more ManifestResult"},"dss2-SigningTimeInfoType":{"type":"object","properties":{"signingTime":{"type":"integer","format":"utc-millisec","description":"This element returns the time value considered by the server to be the signature creation time."},"signingTimeBounds":{"$ref":"#\/definitions\/dss2-SigningTimeInfoType:SigningTimeBoundaries","description":"This element returns the trusted time values considered as lower and upper limits for the signing time."}},"required":["signingTime"],"description":"This SigningTimeInfo component allows the client to obtain the time instant associated to the signature creation."},"dss2-SigningTimeInfoType:SigningTimeBoundaries":{"type":"object","properties":{"lowerBound":{"type":"integer","format":"utc-millisec"},"upperBound":{"type":"integer","format":"utc-millisec"}}},"dss2-VerificationTimeInfoType":{"type":"object","properties":{"verificationTime":{"type":"integer","format":"utc-millisec","description":"This time instant used by the server when verifying the signature. It SHOULD be expressed as UTC time (Coordinated Universal Time) to reduce confusion with the local time zone use."},"additionalTimeInfo":{"type":"array","items":{"$ref":"#\/definitions\/dss2-AdditionalTimeInfoType"},"description":"The AdditionalTimeInfo element can contain any other time instant(s) relevant in the context of the verification time determination."}},"required":["verificationTime"],"description":"The VerificationTimeInfo component allows the client to obtain the time instant used by the server to validate the signature."},"dss2-AdditionalTimeInfoType":{"type":"object","properties":{"value":{"type":"integer","format":"utc-millisec"},"type":{"type":"string","format":"uri","description":"The Type attribute qualifies the kind of time information included in the response. This specification defines the listed types, whose values MUST satisfy the format defined as xs:dateTime and SHOULD be expressed as UTC time (Coordinated Universal Time). Profiles MAY include and define new values for the Type attribute."},"ref":{"type":"string","description":"It allows to establish references to the source of the time information, and SHOULD be used when there is a need to disambiguate several AdditionalTimeInfo components with the same Type attribute."}},"required":["type"],"description":"The AdditionalTimeInfo component contains other time instant(s) relevant in the context of the verification time determination."},"dss2-ProcessingDetailsType":{"type":"object","properties":{"valid":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DetailType"},"description":"The ValidDetail element holds verification details that were evaluated and found to be valid."},"indeterminate":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DetailType"},"description":"The IndeterminateDetail element holds verification details that could not be evaluated or were evaluated and returned an indeterminate result."},"invalid":{"type":"array","items":{"$ref":"#\/definitions\/dss2-DetailType"},"description":"The optional InvalidDetail element  holds  verification details that were evaluated and found to be invalid."}},"description":"The ProcessingDetails component elaborates on what signature verification steps succeeded or failed."},"dss2-DetailType":{"type":"object","properties":{"code":{"type":"string","description":"This URI which more precisely specifies why this detail is valid, invalid, or indeterminate. It must be a value defined by some other specification, since this specification defines no values for this element."},"msg":{"$ref":"#\/definitions\/dsb-InternationalStringType","description":"This is a human-readable message which MAY be logged, used for debugging, etc."},"b64Content":{"type":"string"},"type":{"type":"string","format":"uri","description":"The Type URI identifies the detail. It may be a value defined by this specification, or a value defined by some other specification. Multiple detail elements of the same Type may appear in a single ProcessingDetails component. For example, when a signature contains a certificate chain that certifies the signing key, there may be details of the same Type present for each certificate in the chain, describing how each certificate was processed. "}},"required":["type"]},"dss2-UpdatedSignatureType":{"type":"object","properties":{"sigObj":{"$ref":"#\/definitions\/dss2-SignatureObjectType","description":"This element contains an updated signature or timestamp. "},"type":{"type":"string","format":"uri","description":"The URI defines what “update” was applied to the signature."}},"required":["sigObj"],"description":"The UpdatedSignature component contains the resulting updated signature or timestamp or, in the case of a signature being enveloped in an output document, a pointer to the signature."}}}